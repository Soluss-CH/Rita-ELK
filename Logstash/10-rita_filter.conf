##########################
# Rita Filter Output
# Author: Ludovic Paillard
# Version: 0.2
#
# https://activecm.github.io/threat-hunting-labs/beacons/
# https://www.activecountermeasures.com/wp-content/uploads/2021/06/RITA-Cheat-Sheet.pdf



filter {
  if "rita" in [tags] {
    # Split lines to documents
    split {
      field => "message"
    }
    mutate {
        remove_field => [ "host" ]
    }

    # Beacon
    if "beacon" in [tags] {
      csv {
        source => "message"
        columns => ["rita.score","source.ip","destination.domain","rita.connections_count","rita.connection.avg_bytes","rita.connection.intvl_range","rita.connection.size_range","rita.connection.top_intvl","rita.connection.top_size","rita.connection.top_intvl_count","rita.connection.top_size_count","rita.connection.intvl_skew","rita.connection.size_skew","rita.connection.intvl_dispersion","rita.connection.size_dispersion"]
        separator => ","
      }
      # Remove headers
      if [rita.score] == "Score" {
        drop{}
      }

      # Calculate a uniq document _id to avoid duplicate
      fingerprint {
        source => ["source.ip", "destination.domain"]
      }
      mutate {
        add_field => { "[event][dataset]" => "rita.beacon" }
        add_field => { "[event][type]" => "beacon" }
        convert => { "rita.score" => "float" }
      }

      # DNS Reverse
      mutate {
        add_field => { "destination.ip" => "%{destination.domain}" }
      }
      dns {
          resolve => "[destination.ip]"
          action => "replace"
      }
    }

    # Long connections
    else if "long" in [tags] {
      csv {
        source => "message"
        columns => ["source.ip","destination.ip","service","event.duration","rita.connection.state"]
        separator => ","
      }
      if [source.ip] == "Source IP" {
        drop{}
      }
      dissect {
        mapping => {
          "service" => "%{destination.port}:%{network.transport}:%{network.protocol}"
        }
      }
      # Calculate a uniq document _id to avoid duplicate
      fingerprint {
        source => ["source.ip", "destination.ip"]
      }
      mutate {
        add_field => { "[event][dataset]" => "rita.long-connections" }
        add_field => { "[event][type]" => "long-connections" }
        remove_field => [ "service" ]
        convert => { "event.duration" => "float" }
      }

      # DNS Reverse
      mutate {
        add_field => { "destination.domain" => "%{destination.ip}" }
      }
      dns {
          resolve => "[destination.domain]"
          action => "replace"
      }
    }

    # DNS
    else if "dns" in [tags] {
      csv {
        source => "message"
        columns => ["destination.domain","rita.dns.subdomains_cardinality","rita.dns.domain_count"]
        separator => ","
      }

      # Cleanup local resolution
      if [destination.domain] == "Domain" or [destination.domain] =~ ".*ip6\.arpa$" {
        drop{}
      }
      # Calculate a uniq document _id to avoid duplicate
      fingerprint {
        source => ["destination.domain"]
      }
      mutate {
        add_field => { "[event][dataset]" => "rita.dns-c2" }
        add_field => { "[event][type]" => "dns-c2" }
        convert => { "rita.dns.domain_count" => "integer" }
        convert => { "rita.dns.subdomains_cardinality" => "integer" }
      }

      if [destination.domain] =~ "^[^\\]*$" {
        # DNS Resolve
        mutate {
          add_field => { "destination.ip" => "%{destination.domain}" }
        }
        dns {
          resolve => "[destination.ip]"
          action => "replace"
        }
      }
    }

    # All event
    mutate {
      remove_field => [ "message" ]
      add_field => { "[event][category]" => "network" }
      add_field => { "[event][kind]" => "event" }
      add_field => { "[event][module]" => "rita" }
    }

    # Enrich Geoip
    if [destination.ip] {
      if [destination.ip] =~ "^(?!(192\.168\.))^(?!(172\.(1[6-9]|2[0-9]|3[0-1])\.))^((([1-9]|1[1-9]|[2-9][0-9]|1[0-9]{2}|2[0-1][0-9]|22[0-3])\.)((0|1[0-9]{0,2}|[2-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}(1[0-9]{0,2}|[2-9][0-9]|2[0-4][0-9]|25[0-4]))$" {
        geoip {
            source => "[destination.ip]"
            target => "destination.geo"
        }
      }
      else {
        mutate {
            remove_field => [ "[destination.ip]" ]
        }
      }
    }
  }
}

output {
  if "rita" in [tags] {
    #stdout{}
    elasticsearch {
      hosts => ["<ip_elasticsearch>:9200"]
      index => "rita-%{+yyyy}"
      user => username
      password => password
      ssl => true
      # Version 7:      
      #document_id => "%{fingerprint}"

      # Version 8:
      # Default value is "fingerprint" when ECS is disabled
      # Default value is "[event][hash]" when ECS is enabled
      document_id => "%{[event][hash]}"
      #cacert => "/etc/logstash/certs/RootCA.crt"
      #ssl_certificate_verification => false
    }
  }
}
